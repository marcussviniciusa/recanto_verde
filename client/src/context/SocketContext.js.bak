import React, { createContext, useContext, useEffect, useState, useCallback } from 'react';
import { io } from 'socket.io-client';
import { useAuth } from './AuthContext';
import notificationSound from '../assets/sounds/notification.mp3';

const SocketContext = createContext();

export function useSocket() {
  return useContext(SocketContext);
}

export function SocketProvider({ children }) {
  const [socket, setSocket] = useState(null);
  const [connected, setConnected] = useState(false);
  const [notifications, setNotifications] = useState(() => {
    // Carregar notificações do localStorage quando o componente for montado
    const savedNotifications = localStorage.getItem('notifications');
    return savedNotifications ? JSON.parse(savedNotifications) : [];
  });
  const [soundEnabled, setSoundEnabled] = useState(() => {
    const savedSetting = localStorage.getItem('notificationSound');
    return savedSetting !== null ? JSON.parse(savedSetting) : true; // Som habilitado por padrão
  });
  const { user } = useAuth();
  
  // Referência para o elemento de áudio
  const notificationAudio = React.useRef(new Audio(notificationSound));

  useEffect(() => {
    // Only connect to socket if user is logged in
    if (!user) {
      if (socket) {
        socket.disconnect();
        setSocket(null);
        setConnected(false);
      }
      return;
    }

    // Connect to socket
    const socketInstance = io(process.env.REACT_APP_SOCKET_URL || '', {
      auth: {
        token: localStorage.getItem('token')
      },
      transports: ['websocket'],
      reconnection: true,
      reconnectionAttempts: 5,
      reconnectionDelay: 1000
    });

    socketInstance.on('connect', () => {
      console.log('Socket connected');
      setConnected(true);
      
      // Join room based on user role
      socketInstance.emit('join', user.role);
    });

    socketInstance.on('disconnect', () => {
      console.log('Socket disconnected');
      setConnected(false);
    });

    // Listen for notifications based on user role
    if (user.role === 'superadmin') {
      // Listen for table updates
      socketInstance.on('tableUpdated', (data) => {
        console.log('Table updated:', data);
        if (data && data.tableNumber) {
          addNotification({
            type: 'table',
            message: `Mesa ${data.tableNumber} agora está ${data.status === 'available' ? 'disponível' : 'ocupada'}`,
            data
          });
        } else {
          console.warn('Recebidos dados inválidos para tableUpdated:', data);
        }
      });

      // Listen for new orders
      socketInstance.on('orderNotification', (data) => {
        console.log('New order:', data);
        if (data && data.tableNumber) {
          addNotification({
            type: 'order',
            message: `Novo pedido para a mesa ${data.tableNumber}`,
            data
          });
        } else {
          console.warn('Recebidos dados inválidos para orderNotification:', data);
        }
      });
      
      // Listen for payment requests
      socketInstance.on('paymentRequestNotification', (data) => {
        console.log('Payment request:', data);
        if (data && data.tableNumber) {
          addNotification({
            type: 'payment',
            message: `Solicitação de pagamento para mesa ${data.tableNumber} - R$ ${data.totalAmount.toFixed(2)}`,
            data
          });
        } else {
          console.warn('Recebidos dados inválidos para paymentRequestNotification:', data);
        }
      });
    } else if (user.role === 'waiter') {
      // Listen for new order notifications (para outros garçons saberem quando um garçom fez um pedido)
      socketInstance.on('orderNotification', (data) => {
        console.log('New order notification (waiter):', data);
        if (data && data.tableNumber) {
          addNotification({
            type: 'order',
            message: `Novo pedido para a mesa ${data.tableNumber}`,
            data,
            priority: 'normal'
          });
        } else {
          console.warn('Recebidos dados inválidos para orderNotification:', data);
        }
      });
      
      // Listen for order ready notifications
      socketInstance.on('readyNotification', (data) => {
        console.log('Order ready:', data);
        if (data && data.tableNumber) {
          addNotification({
            type: 'ready',
            message: `Pedido pronto para a mesa ${data.tableNumber}`,
            data,
            priority: 'high',
            showToast: true
          });
        } else {
          console.warn('Recebidos dados inválidos para readyNotification:', data);
        }
      });
      
      // Listen for payment requests
      socketInstance.on('paymentRequestNotification', (data) => {
        console.log('Payment request:', data);
        if (data && data.tableNumber) {
          addNotification({
            type: 'payment',
            message: `Solicitação de pagamento para mesa ${data.tableNumber} - R$ ${data.totalAmount.toFixed(2)}`,
            data
          });
        } else {
          console.warn('Recebidos dados inválidos para paymentRequestNotification:', data);
        }
      });
      
      // Listen for table status changed notifications
      socketInstance.on('tableStatusChanged', (data) => {
        console.log('Table status changed:', data);
        if (data && data.tableId) {
          addNotification({
            type: 'tableStatus',
            message: data.tableNumber 
              ? `Mesa ${data.tableNumber} agora está ${data.status === 'available' ? 'disponível' : 'ocupada'}`
              : `Status de mesa atualizado para ${data.status === 'available' ? 'disponível' : 'ocupada'}`,
            data
          });
        } else {
          console.warn('Recebidos dados inválidos para tableStatusChanged:', data);
        }
      });
    }

    setSocket(socketInstance);

    // Clean up on unmount
    return () => {
      if (socketInstance) {
        socketInstance.disconnect();
      }
    };
  }, [user]); 

  // Reproduzir som de notificação
  const playNotificationSound = useCallback(() => {
    if (soundEnabled) {
      notificationAudio.current.play().catch(err => {
        console.warn('Erro ao reproduzir som de notificação:', err);
      });
    }
  }, [soundEnabled]);

  // Persistir notificações no localStorage quando o estado mudar
  useEffect(() => {
    // Limitar o número máximo de notificações guardadas (50)
    const limitedNotifications = notifications.slice(0, 50);
    localStorage.setItem('notifications', JSON.stringify(limitedNotifications));
  }, [notifications]);

  // Persistir a configuração de som
  useEffect(() => {
    localStorage.setItem('notificationSound', JSON.stringify(soundEnabled));
  }, [soundEnabled]);

  // Alternar habilitação do som
  const toggleSound = useCallback(() => {
    setSoundEnabled(prev => !prev);
  }, []);

  // Add notification with priority
  const addNotification = useCallback((notification) => {
    // Checar se é uma notificação de alta prioridade
    const isPriority = notification.priority === 'high';
    
    // Criar nova notificação
    const newNotification = {
      id: Date.now(),
      timestamp: new Date(),
      read: false,
      priority: notification.priority || 'normal',
      ...notification
    };
    
    // Atualizar o estado
    setNotifications((prev) => [newNotification, ...prev]);
    
    // Reproduzir som para todas as notificações ou apenas as prioritárias
    if (isPriority || soundEnabled) {
      playNotificationSound();
    }
    
    // Para notificações de alta prioridade, também mostrar um toast
    if (isPriority && notification.showToast) {
      // A função de exibir toast será implementada na UI
    }
    
    return newNotification.id;
  }, [playNotificationSound, soundEnabled]);

  // Mark notification as read
  const markAsRead = useCallback((notificationId) => {
    setNotifications((prev) =>
      prev.map((notification) =>
        notification.id === notificationId
          ? { ...notification, read: true }
          : notification
      )
    );
  }, []);
  
  // Mark all notifications as read
  const markAllAsRead = useCallback(() => {
    setNotifications((prev) =>
      prev.map((notification) => ({ ...notification, read: true }))
    );
  }, []);

  // Clear all notifications
  const clearNotifications = useCallback(() => {
    setNotifications([]);
  }, []);
  
  // Delete a specific notification
  const deleteNotification = useCallback((notificationId) => {
    setNotifications((prev) =>
      prev.filter((notification) => notification.id !== notificationId)
    );
  }, []);
  
  // Clear notifications by type
  const clearNotificationsByType = useCallback((type) => {
    setNotifications((prev) =>
      prev.filter((notification) => notification.type !== type)
    );
  }, []);
  
  // Get notifications filtered by type
  const getNotificationsByType = useCallback((type) => {
    return notifications.filter((notification) => notification.type === type);
  }, [notifications]);

  // Emit events
  const emitTableUpdate = (tableData) => {
    if (socket && connected) {
      // Verificar se os dados são válidos antes de enviar
      if (tableData && (tableData.tableId || tableData._id)) {
        console.log('Emitindo updateTable:', tableData);
        socket.emit('updateTable', tableData);
      } else {
        console.warn('Tentativa de emitir evento updateTable com dados inválidos:', tableData);
      }
    } else if (!socket) {
      console.warn('Socket não inicializado ao emitir updateTable');
    } else if (!connected) {
      console.warn('Socket não conectado ao emitir updateTable');
    }
  };

  const emitNewOrder = (orderData) => {
    if (socket && connected) {
      // Verificar se os dados são válidos antes de enviar
      if (orderData && (orderData.orderId || orderData._id)) {
        console.log('Emitindo newOrder:', orderData);
        socket.emit('newOrder', orderData);
      } else {
        console.warn('Tentativa de emitir evento newOrder com dados inválidos:', orderData);
      }
    }
  };

  const emitOrderReady = (orderData) => {
    if (socket && connected) {
      // Verificar se os dados são válidos antes de enviar
      if (orderData && (orderData.orderId || orderData._id)) {
        console.log('Emitindo orderReady:', orderData);
        socket.emit('orderReady', orderData);
      } else {
        console.warn('Tentativa de emitir evento orderReady com dados inválidos:', orderData);
      }
    }
  };
  
  const emitRequestPayment = (paymentData) => {
    if (socket && connected) {
      // Verificar se os dados são válidos antes de enviar
      if (paymentData && paymentData.tableId && paymentData.totalAmount) {
        console.log('Emitindo requestPayment:', paymentData);
        socket.emit('requestPayment', paymentData);
      } else {
        console.warn('Tentativa de emitir evento requestPayment com dados inválidos:', paymentData);
      }
    }
  };

  const value = {
    socket,
    connected,
    notifications,
    unreadCount: notifications.filter(n => !n.read).length,
    soundEnabled,
    toggleSound,
    addNotification,
    markAsRead,
    markAllAsRead,
    clearNotifications,
    deleteNotification,
    clearNotificationsByType,
    getNotificationsByType,
    emitTableUpdate,
    emitNewOrder,
    emitOrderReady,
    emitRequestPayment
  };

  return (
    <SocketContext.Provider value={value}>
      {children}
    </SocketContext.Provider>
  );
}
